# ubuntu1604.yaml
# Author: Brent Clements bclements@2ndwatch.com
# TODO:
#   1. Add more Parameter Labels
#   2. Update SSSD Paramemters once access to ADFS is restored
AWSTemplateFormatVersion: "2010-09-09"
Description:
  Template to deploy a Ubuntu 16.04 Instance
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"
        Parameters:
          - InstType
          - KeyName
      - Label:
          default: "EC2 Instance Network Configuration"
        Parameters:
          - HostName
          - SubnetId
          - InstanceSecurityGroup
      - Label:
          default: "EC2 Instance Tags"
        Parameters:
          - TagEnvironment
          - TagEnvironmentClass
          - TagProject
          - TagService
          - TagPurpose
          - Tag2wServiceTier
          - Tagcpmbackup

    ParameterLabels:
      SubnetId:
        default: "Which Subnet should this instance be deployed to?"

Parameters:
  InstType:
    Type: "String"
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.large
      - c4.large
      - c4.xlarge
      - m5.large
      - m5.xlargeÂ 
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  HostName:
    Type: "String"
  SubnetId:
    Description: "Subnet that the instance should be deployed to"
    Type: "AWS::EC2::Subnet::Id"
    ConstraintDescription: "must be list of EC2 subnet ids"
  InstanceSecurityGroup:
    Description: "Security groups that can be used to access the EC2 instances"
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: "must be list of EC2 security group ids"
  # EC2 Instance Tags
  TagEnvironment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - misc
    Description: Enter dev for Dev Environments or prod for Live production environments. Default is dev.
  TagEnvironmentClass:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - misc
      - wininf
      - lnxinf
    Description: Enter dev for Dev Environments or prod for Live production environments. Default is dev.
  TagProject:
    Type: "String"
    Description: Enter the project name or id
  TagService:
    Type: String
    Default: Infrastructure
    AllowedValues:
      - AlertLogic
      - OpenVAS
      - Sophos
      - ActiveDirectory
      - Infrastructure
    Description: Enter the service which this resource supports. Default is Infrastructure.
  TagPurpose:
    Type: String
    Default: DataScience
    AllowedValues:
      - DataScience
      - Database
      - DomainController
      - DFS - Distributed File System
      - Test
      - Monitoring
    Description: Enter the purpose for the deployment of this instance. Default DataScience.
  Tag2wServiceTier:
    Type: String
    Default: OPERATE
    AllowedValues:
      - OPTIMIZE
      - OPERATE
      - MONITOR
      - SELF MANAGE
    Description: Enter the 2nd Watch Support Option. Choose OPTIMIZE for Windows Systems and Operate for Linux Systems. Default is OPERATE.
  Tagcpmbackup:
    Type: String
    Default: 3
    AllowedValues:
      - 3
      - 7
      - 14
    Description: Enter the desird snapshot retention period (in days). Default is 3 days.

Mappings:
  AMIRegionMap:
    us-east-1:
      "64": "ami-43a15f3e"
    us-east-2:
      "64": "ami-916f59f4"
    us-west-1:
      "64": "ami-925144f2"
    us-west-2:
      "64": "ami-4e79ed36"

Resources:
  UbuntuInstance:
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/hostname:
              mode: "000644"
              owner: "root"
              group: "root"
              content: !Sub |
                ${HostName}
    Properties:
      SubnetId: !Ref SubnetId
      InstanceType: !Ref InstType
      ImageId: !FindInMap [AMIRegionMap, !Ref "AWS::Region", 64] # Ubuntu 16.04 HVM
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
        -
          DeviceName: /dev/sdm
          Ebs:
            VolumeSize: 30
      Tags:
        - Key: Name
          Value: !Ref HostName
        - Key: Environment
          Value: !Ref TagEnvironment
        - Key: EnvironmentClass
          Value: !Ref TagEnvironmentClass
        - Key: Project
          Value: !Ref TagProject
        - Key: Service
          Value: !Ref TagService
        - Key:  Purpose
          Value: !Ref TagPurpose
        - Key: 2w:ServiceTier
          Value: !Ref Tag2wServiceTier
        - Key: PatchGroup
          Value: !Ref TagEnvironmentClass
        - Key: cpmbackup
          Value: !Ref Tagcpmbackup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -v
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r UbuntuInstance --region ${AWS::Region}
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get install -y npm
          sudo npm install -y gtop -g
          sudo apt-add-repository -y ppa:webupd8team/java
          sudo apt-get update
          echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
          sudo apt-get install -y oracle-java8-installer
          sudo apt-get -y install python3 python3-pip
          pip3 install --upgrade pip
          sudo apt-get -y install r-base
          cd /tmp
          wget http://mirrors.ocf.berkeley.edu/apache/spark/spark-2.3.0/spark-2.3.0-bin-hadoop2.7.tgz
          sudo tar -zxvf spark-2.3.0-bin-hadoop2.7.tgz -C /opt/
          rm spark-2.3.0-bin-hadoop2.7.tgz
          sudo ln -fs /opt/spark-2.3.0-bin-hadoop2.7/ /opt/spark
          sudo cp /opt/spark/conf/spark-env.sh.template /opt/spark/conf/spark-env.sh
          sudo bash -c 'echo "#Spark Environment Variables" >> /opt/spark/conf/spark-env.sh'
          sudo bash -c 'echo "JAVA_HOME=/usr/lib/jvm/java-8-oracle" >> /opt/spark/conf/spark-env.sh'
          sudo bash -c 'echo "SPARK_WORKER_MEMORY=4g" >> /opt/spark/conf/spark-env.sh'
          sudo bash -c 'echo "PYSPARK_PYTHON=python3" >> /opt/spark/conf/spark-env.sh'
          source /opt/spark/conf/spark-env.sh
          sudo apt-get -y install npm nodejs-legacy libfontconfig
          cd /tmp
          wget http://mirrors.ocf.berkeley.edu/apache/zeppelin/zeppelin-0.7.3/zeppelin-0.7.3-bin-all.tgz
          sudo tar -zxvf zeppelin-0.7.3-bin-all.tgz -C /opt/
          rm zeppelin-0.7.3-bin-all.tgz
          sudo sed -i '14i/opt/zeppelin-0.7.3-bin-all/bin/zeppelin-daemon.sh start' /etc/rc.local
          init 0
